import Draft as Draft
import DraftVecUtils as DraftVecUtils
import FreeCAD as FreeCAD
import FreeCADGui as FreeCADGui
import PySide.QtCore as QtCore
import PySide.QtGui as QtGui
import PySide2.QtCore
import PySide2.QtWidgets
from _typeshed import Incomplete
from typing import ClassVar

__url__: str
inCommandShortcuts: dict

class DraftBaseWidget(PySide2.QtWidgets.QWidget):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: Incomplete | None = ...) -> None: ...
    def eventFilter(self, widget, event): ...

class DraftDockWidget(DraftBaseWidget):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: Incomplete | None = ...) -> None: ...
    def resizeEvent(self, event): ...
    def changeEvent(self, event): ...

class DraftLineEdit(PySide2.QtWidgets.QLineEdit):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: Incomplete | None = ...) -> None: ...
    def keyPressEvent(self, event): ...

class DraftTaskPanel:
    def __init__(self, widget, extra: Incomplete | None = ...) -> None: ...
    def getStandardButtons(self): ...
    def accept(self): ...
    def reject(self): ...
    def isAllowedAlterDocument(self): ...

class DraftToolBar:
    def __init__(self) -> None: ...
    def _pushbutton(self, name, layout, hide: bool = ..., icon: Incomplete | None = ..., width: Incomplete | None = ..., checkable: bool = ..., square: bool = ...): ...
    def _label(self, name, layout, hide: bool = ..., wrap: bool = ...): ...
    def _lineedit(self, name, layout, hide: bool = ..., width: Incomplete | None = ...): ...
    def _inputfield(self, name, layout, hide: bool = ..., width: Incomplete | None = ...): ...
    def _spinbox(self, name, layout, val: Incomplete | None = ..., vmax: Incomplete | None = ..., hide: bool = ..., double: bool = ..., size: Incomplete | None = ...): ...
    def _checkbox(self, name, layout, checked: bool = ..., hide: bool = ...): ...
    def _combo(self, name, layout, hide: bool = ...): ...
    def setupToolBar(self, task: bool = ...):
        """sets the draft toolbar up"""
    def setupTray(self):
        """sets draft tray buttons up"""
    def setupStyle(self): ...
    def retranslateUi(self, widget: Incomplete | None = ...): ...
    def retranslateTray(self, widget: Incomplete | None = ...): ...
    def taskUi(self, title: str = ..., extra: Incomplete | None = ..., icon: str = ...): ...
    def redraw(self):
        """utility function that is performed after each clicked point"""
    def setFocus(self, f: Incomplete | None = ...): ...
    def number_length(self, str): ...
    def extraLineUi(self):
        """shows length and angle controls"""
    def hideXYZ(self):
        """ turn off all the point entry widgets """
    def lineUi(self, title: str = ..., cancel: Incomplete | None = ..., extra: Incomplete | None = ..., getcoords: Incomplete | None = ..., rel: bool = ..., icon: str = ...): ...
    def wireUi(self, title: str = ..., cancel: Incomplete | None = ..., extra: Incomplete | None = ..., getcoords: Incomplete | None = ..., rel: bool = ..., icon: str = ...): ...
    def circleUi(self): ...
    def arcUi(self): ...
    def rotateSetCenterUi(self): ...
    def pointUi(self, title: str = ..., cancel: Incomplete | None = ..., extra: Incomplete | None = ..., getcoords: Incomplete | None = ..., rel: bool = ..., icon: str = ...): ...
    def labelUi(self, title: str = ..., callback: Incomplete | None = ...): ...
    def extraUi(self): ...
    def offsetUi(self): ...
    def offUi(self): ...
    def trimUi(self, title: str = ...): ...
    def radiusUi(self): ...
    def textUi(self): ...
    def switchUi(self, store: bool = ...): ...
    def setTitle(self, title, icon: str = ...): ...
    def selectUi(self, extra: Incomplete | None = ..., on_close_call: Incomplete | None = ...): ...
    def editUi(self): ...
    def extUi(self): ...
    def modUi(self): ...
    def checkLocal(self):
        """checks if x,y,z coords must be displayed as local or global"""
    def setNextFocus(self): ...
    def setRelative(self, val: int = ...): ...
    def setGlobal(self, val: int = ...): ...
    def setCopymode(self, val: int = ...): ...
    def setSubelementMode(self): ...
    def relocate(self):
        """relocates the right-aligned buttons depending on the toolbar size"""
    def makeDumbTask(self, extra: Incomplete | None = ..., on_close_call: Incomplete | None = ...):
        """create a dumb taskdialog to prevent deleting the temp object"""
    def setContinue(self, val): ...
    def setFill(self, val): ...
    def checkx(self): ...
    def checky(self): ...
    def checklength(self): ...
    def validatePoint(self):
        """function for checking and sending numbers entered manually"""
    def finish(self, cont: Incomplete | None = ...):
        """finish button action"""
    def escape(self):
        """escapes the current command"""
    def closeLine(self):
        """close button action"""
    def wipeLine(self):
        """wipes existing segments of a line"""
    def orientWP(self):
        """reorients the current working plane"""
    def selectEdge(self):
        """allows the dimension command to select an edge"""
    def undoSegment(self):
        """undo last line segment"""
    def checkSpecialChars(self, txt):
        """checks for special characters in the entered coords that must be
                treated as shortcuts
        """
    def updateSnapper(self):
        """updates the snapper track line if applicable"""
    def checkEnterText(self):
        """this function checks if the entered text ends with two blank lines"""
    def sendText(self):
        """this function sends the entered text to the active draft command
                if enter has been pressed twice. Otherwise it blanks the line.
        """
    def displayPoint(self, point: Incomplete | None = ..., last: Incomplete | None = ..., plane: Incomplete | None = ..., mask: Incomplete | None = ...):
        """this function displays the passed coords in the x, y, and z widgets"""
    def getDefaultColor(self, type, rgb: bool = ...):
        """gets color from the preferences or toolbar"""
    def cross(self, on: bool = ...):
        """deprecated"""
    def toggleConstrMode(self, checked): ...
    def toggleContinue(self): ...
    def isConstructionMode(self): ...
    def selectplane(self): ...
    def setstyle(self): ...
    def setStyleButton(self):
        """sets icon and text on the style button"""
    def popupMenu(self, llist, ilist: Incomplete | None = ..., pos: Incomplete | None = ...):
        """pops up a menu filled with the given list"""
    def getIcon(self, iconpath): ...
    def popupTriggered(self, action): ...
    def setRadiusValue(self, val, unit: Incomplete | None = ...): ...
    def runAutoGroup(self): ...
    def setAutoGroup(self, value: Incomplete | None = ...): ...
    def getXPM(self, iconname, size: int = ...): ...
    def togglesnap(self): ...
    def toggleradius(self, val): ...
    def constrain(self, val): ...
    def changeXValue(self, d): ...
    def changeYValue(self, d): ...
    def changeZValue(self, d): ...
    def changeRadiusValue(self, d): ...
    def changeLengthValue(self, d): ...
    def changeAngleValue(self, d): ...
    def toggleAngle(self, b): ...
    def update_spherical_coords(self): ...
    def update_cartesian_coords(self): ...
    def setWatchers(self): ...
    def changeEvent(self, event): ...
    def Activated(self): ...
    def Deactivated(self): ...
    def reset_ui_values(self):
        """Method to reset task panel values"""

class FacebinderTaskPanel:
    def __init__(self) -> None: ...
    def isAllowedAlterSelection(self): ...
    def isAllowedAlterView(self): ...
    def getStandardButtons(self): ...
    def update(self):
        """fills the treewidget"""
    def addElement(self): ...
    def removeElement(self): ...
    def accept(self): ...
    def retranslateUi(self, TaskPanel): ...
